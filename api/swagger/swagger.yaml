swagger: "2.0"

info:
  title: bdx-quizz
  description: API description in Markdown.
  version: 1.0.0
host: api.example.com
basePath: /v1
schemes:
  - https

paths:
  
  /categories:
    get:
      tags:
        - visitor
      description: Returns the categories lists
      operationId: categoriesList
      responses:
        '200':
          description: categories response
          schema:
            type: array
            items: 
              $ref:  "#/definitions/Category"
        default:
          description: Error categories
          schema:
            $ref:  "#/definitions/ErrorModel"


  /users?q=:
    get:
      parameters:
        - in: query
          name: q
          type: string
          description: The name of the user
        
      tags:
        - "users"
      description: Returns the users list
      operationId: usersList
      responses:
        "200":
          description: An array of users
          schema:
            type: array
            items:
              $ref:  "#/definitions/User"
        default:
          description: Error - Users not found
          schema:
            $ref: "#/definitions/ErrorModel"

            

  /addFriend/{userId}:
    post:
      parameters:
        - in: path
          name: userId
          required: True
          type: string
          description: The Id of a user
        - in: body
          name: user
          schema:
            $ref:  "#/definitions/User"
          
      tags:
        - users
      responses: 
        "200":
          description: The invitation has been successfully send.
        "400":
          description: Error - This user doesn't exist.
      operationId: addFriend
      description: Find a user by Id and send a friend request to him.
          

  /removeFriend/{userId}:
    post:
      parameters:
        - in: path
          name: userId
          required: True
          type: string
          description: The Id of a user
        - in: body
          name: user
          schema:
            $ref:  "#/definitions/User"
      tags:
        - users
      responses:
        "200":
          description: Success - The user has been successfully removed from your friends list.
        "400":
          description: Error - The user is not in your friends list.
      operationId: removeFriend
      description: Remove a friend from the friends list.
  
  /user/invite/{email}:
    post:
      parameters:
        - in: path
          name: email
          required: True
          type: string
          description: The mail of the friend
      tags:
        - users
      description: Send email to invite a friend to play.
      responses:
        "200":
          description: Success - Invitation sent.
        "400":
          description: Error - Email address not found.
      
  /friendList/{userId}:
    get:
      tags:
        - users
      parameters:
        - in: path
          name: userId
          required: True
          type: string
          description: The Id of an user
      responses:
        "200":
          description: Success - Send the list of friends of the user
          schema:
            type: array
            items:
              $ref:  "#/definitions/User"
        "400":
          description: Error - This user does not exist
          schema:
            $ref: "#/definitions/ErrorModel"
      operationId: listFriends
      description: list all the friends of an user.


  /user:
    post:
      tags:
        - visitor
      description: Create a new user 
      parameters:
        - in: body
          name: user
          schema:
            $ref: "#/definitions/User"

      responses:
        "200":
          description: The user has been created successfully.
        "400":
          description: This user already exists.

  /user/{userId}:
    get:
      tags:
        - users
      parameters:
        - in: path
          name: userId
          required: True
          type: string
          description: The Id of an user
      responses:
        "200":
          description: Success - Send an user
          schema: 
            $ref: "#/definitions/User"
        "400":
          description: Error - User not found
          schema:
            $ref: "#/definitions/User"
      operationId: getUser
      description: find a user by Id
    post:
      tags:
        - users
      parameters:
        - in: body
          name: user
          schema:
            $ref:  "#/definitions/User"
      responses:
        "200":
          description: Success - The user info has been updated
          schema: 
            $ref: "#/definitions/User"
        "400":
          description: Error - User not found
          schema:
            $ref: "#/definitions/ErrorModel"
      operationId: editUser
      description: modify the data of your account

  /topPlayers:
    get:
      tags:
      - visitor
      description: Returns the top 10 of all categories
      responses:
        "200":
          description: Sucess
          schema:
            type: array
            items: 
              $ref:  "#/definitions/User"
        default:
          description: Error Users
          schema:
            $ref:  "#/definitions/ErrorModel"
          
          
  /stats/{questionId}:
    get:
      tags:
        - visitor
      description: Return the ratio of good and bad answer of a specified question
      responses:
        "200":
          description: Succes
          schema: 
            type: object
            $ref: "#/definitions/QuestionStat"
        default:
          description: this question doesn't exists.
          schema:
            $ref:  "#/definitions/ErrorModel"


  
  /question/{categoryId}/random:
    get:
      tags:
        - users
      parameters:
        - in: path
          name: categoryId
          required: True
          type: integer
          description: The Id of a category
      responses:
        '200':
          description: Success - Send a random question of a category
          schema:
            type: string
            format: binary
      description: Returns a random question.

  /question/{categoryId}/all:
    get:
      tags:
        - users
      description: Return all the questions from a category.
      responses:
        "200":
          description: Sucess
          
  /question/{categoryId}/{difficultyId}/random:
    get:
      tags:
        - users
      description: Return a random question with the selected difficulty and category.
      responses:
        "200":
          description: Success
  
  /response/{questionId}:
    get:
      tags:
        - users
      description:
        Returns the response of a specified question
      responses:
        "200":
          description: Success

  /anecdote/{questionId}:
    get:
      tags: 
        - users
      description: Return an anecdote with additional information to the question asked
      responses:
        "200":
          description: Success

  /question/{categoryId}/{questionId}?diff=:
    get:
      parameters:
        - in: query
          name: diff
          type: integer
          description: Specify the difficulty of the question.
        - in: path
          name: categoryId
          type: integer
          description: todo
          required: True
        - in: path
          name: questionId
          type: integer
          description: todo
          required: True
        
      tags:
        - users
      responses:
        "200":
          description: Success
      description: find question of a specific categorie by Id 

      deprecated: false
          
      
  

definitions:
  Category:
    type: object
    required:
      - id
      - name
      - timePlayed
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Animaux
      timePlayed:
        type: integer
        example: 1000
  
  ErrorModel:
    type: object
    required:
    - message
    - code
    properties:
      message:
        type: string
      code:
        type: integer
        minimum: 100
        maximum: 600
        
  Difficulty:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: DÃ©butant


  User:
    type: object
    required:
      - id
      - pseudo
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0480
      pseudo:
        type: string
        example: Yondamdam

  QuestionStat:
    type: object
    required:
      - questionID
      - nbGoodAnswers
      - nbBadAnswers
      - totalAnswers
    properties:
      questionID:
        type: integer
        example: 10
      nbGoodAnswers:
        type: number
        example: 56
      nbBadAnswers:
        type: number
        example: 40
      totalAnswers:
        type: number
        example: 96



