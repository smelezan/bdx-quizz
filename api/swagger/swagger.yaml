openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/smelezan/Quizzup/1.0.0
info:
  description: This is a simple Quizz API
  version: "1.0.0"
  title: Simple Quizz API
  contact:
    email: bdx-quizz@bordeaux.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: users
    description: Logged in user
  - name: visitor
    description: Operations available to non account user
paths:



  /categories:
    get:
      tags:
        - visitor
      description: Returns the categories lists
      operationId: categoriesList
      responses:
        '200':
          description: Logo image in PNG format
          content:
            image/png:
              schema:
                type: array
                # items: 
                  # $ref: '#/components/schemas/InventoryItem'
                format: binary
  /users?q=:
    get:
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: The partial searched username
      tags:
        - "users"
      description: Returns the users list
      # used as the method name of the controller
      operationId: usersList
      responses:
        "200":
          description: Sucess

  /addFriend/{userId}:
    post:
      tags:
        - users
      responses:
        "200":
          description: Success
      operationId: addFriend
      description: find a user by Id and send a friend request to him.
        
    
      deprecated: false

  /removeFriend/{userId}:
    post:
      tags:
        - users
      responses:
        "200":
          description: Success
      operationId: removeFriend
      description: remove a friend from the friend list.
  
  /user/{userId}/invite:
    post:
      tags:
        - users
      description: Send friend request to a user
      responses:
        "200":
          description: Success
      
  /friendList/{userId}:
    get:
      tags:
        - users
      responses:
        "200":
          description: Success
      operationId: list friends of an user
      description: list all the friends of user {userId}.
        
    
      deprecated: false


  /user:
    post:
      tags:
        - visitor
      description: Create a new user 

      responses:
        "200":
          description: Sucess

  /user/{userId}:
    get:
      tags:
        - user
      responses:
        "200":
          description: Success
      operationId: getUser
      description: find a user by Id
    post:
      tags:
        - users
      responses:
        "200":
          description: Success
      operationId: modify user
      description: modify the data of your account

  /topPlayers:
    get:
      tags:
      - visitor
      description: Returns the top 10 of all categories
      responses:
        "200":
          description: Sucess
          
  /stats/{questionId}:
    get:
      tags:
        - visitor
      description: Return the ratio of good and bad answer of a specified question
      responses:
        "200":
          description: Succes

  
  /question/{categoryId}/random:
    get:
      tags:
        - users
      description: Returns a random question.
      responses:
        '200':
          description: Logo image in PNG format
          content:
            image/png:
              schema:
                type: string
                format: binary

  /question/{categoryId}/all:
    get:
      tags:
        - users
      description: Return all the questions from a category.
      responses:
        "200":
          description: Sucess
          
  /question/{categoryId}/{difficultyId}/random:
    get:
      tags:
        - users
      description: Return a random question with the selected difficulty and category.
      responses:
        "200":
          description: Success
  
  /response/{questionId}:
    get:
      tags:
        - users
      description:
        Returns the response of a specified question
      responses:
        "200":
          description: Success

  /anecdote/{questionId}:
    get:
      tags: 
        - users
      description: Return an anecdote with additional information to the question asked
      responses:
        "200":
          description: Success

  /question/{categoryId}/{questionId}?diff=:
    get:
      parameters:
        - in: query
          name: diff
          
          description: Specify the difficulty of the question.
          schema:
            type: number

      tags:
        - users
      responses:
        "200":
          description: Success
      description: find question of a specific categorie by Id 

      deprecated: false
          
      
  

components:
  schemas:

    Category:
      type: object
      required:
        - id
        - name
        - timePlayed
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Animaux
        timePlayed:
          type: integer
          example: 1000
          
          
    Difficulty:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: DÃ©butant


    Player:
      type: object
      required:
        - id
        - pseudo
        - money
        - level
        - friends
      properties:
        id:
          type: string
          format: uuid
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
        password:
          type: string
          example: -012345-
        money:
          type: integer
          example: 10
        level:
          type: integer
          example: 1
        friends:
          type: array
          items: 
            type: string
            format: uuid
            example: d290f1ee-6c54-4b01-90e6-d701748f0480

