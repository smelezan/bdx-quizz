swagger: "2.0"

info:
  title: bdx-quizz
  description: API description in Markdown.
  version: 1.0.0
host: api.example.com
basePath: /v1
schemes:
  - https

paths:
  
  /categories:
    get:
      tags:
        - visitor
      description: Returns the categories lists
      operationId: categoriesList
      responses:
        '200':
          description: categories response
          schema:
            type: array
            items: 
              $ref:  "#/definitions/Category"
        default:
          description: Error categories
          schema:
            $ref:  "#/definitions/ErrorModel"


  /users?q=:
    get:
      parameters:
        - in: query
          name: q
          type: string
          description: The name of the user
        
      tags:
        - "users"
      description: Returns the users list
      operationId: usersList
      responses:
        "200":
          description: An array of users
          schema:
            type: array
            items:
              $ref:  "#/definitions/User"
        default:
          description: Error - Users not found
          schema:
            $ref: "#/definitions/ErrorModel"

            

  /addFriend/{userId}:
    post:
      parameters:
        - in: path
          name: userId
          required: True
          type: string
          description: The Id of a user
        - in: body
          name: user
          schema:
            $ref:  "#/definitions/User"
          
      tags:
        - users
      responses: 
        "200":
          description: The invitation has been successfully send.
        "400":
          description: Error - This user doesn't exist.
      operationId: addFriend
      description: Find a user by Id and send a friend request to him.
          

  /removeFriend/{userId}:
    post:
      parameters:
        - in: path
          name: userId
          required: True
          type: string
          description: The Id of a user
        - in: body
          name: user
          schema:
            $ref:  "#/definitions/User"
      tags:
        - users
      responses:
        "200":
          description: Success - The user has been successfully removed from your friends list.
        "400":
          description: Error - The user is not in your friends list.
      operationId: removeFriend
      description: Remove a friend from the friends list.
  
  /user/invite/{email}:
    post:
      parameters:
        - in: path
          name: email
          required: True
          type: string
          description: The mail of the friend
      tags:
        - users
      description: Send a mail to invite a person not registered to play one game.
      responses:
        "200":
          description: Success - Invitation sent.
        "400":
          description: Error - Email address not found.
          
  /user/invite/{username}:
    post:
      parameters:
        - in: path
          name: username
          required: True
          type: string
          description: The username of the friend
      tags:
        - users
      description: Send notification to invite a friend to play.
      responses:
        "200":
          description: Success - Invitation sent.
        "400":
          description: Error - username not found.
      
  /friendList/{userId}:
    get:
      tags:
        - users
      parameters:
        - in: path
          name: userId
          required: True
          type: string
          description: The Id of an user
      responses:
        "200":
          description: Success - Send the list of friends of the user
          schema:
            type: array
            items:
              $ref:  "#/definitions/User"
        "400":
          description: Error - This user does not exist
          schema:
            $ref: "#/definitions/ErrorModel"
      operationId: listFriends
      description: list all the friends of an user.


  /user:
    post:
      tags:
        - visitor
      description: Create a new user 
      parameters:
        - in: body
          name: user
          schema:
            $ref: "#/definitions/User"

      responses:
        "200":
          description: The user has been created successfully.
        "400":
          description: This user already exists.

  /user/{userId}:
    get:
      tags:
        - users
      parameters:
        - in: path
          name: userId
          required: True
          type: string
          description: The Id of an user
      responses:
        "200":
          description: Success - Send an user
          schema: 
            $ref: "#/definitions/User"
        "400":
          description: Error - User not found
          schema:
            $ref: "#/definitions/User"
      operationId: getUser
      description: find a user by Id
    post:
      tags:
        - users
      parameters:
        - in: body
          name: user
          schema:
            $ref:  "#/definitions/User"
      responses:
        "200":
          description: Success - The user info has been updated
          schema: 
            $ref: "#/definitions/User"
        "400":
          description: Error - User not found
          schema:
            $ref: "#/definitions/ErrorModel"
      operationId: editUser
      description: modify the data of your account

  /topPlayers:
    get:
      tags:
      - visitor
      description: Returns the top 10 of all categories
      responses:
        "200":
          description: Sucess
          schema:
            type: array
            items: 
              $ref:  "#/definitions/User"
        default:
          description: Error Users
          schema:
            $ref:  "#/definitions/ErrorModel"
          
          
  /stats/?questionId=:
    get:
      tags:
        - visitor
      parameters:
        - in: query
          name: questionId
          required: True
          type: integer
          description: The Id of a question
      description: Return the ratio of good and bad answer of a specified question
      responses:
        "200":
          description: Succes
          schema: 
            type: object
            $ref: "#/definitions/QuestionStat"
        default:
          description: this question doesn't exists.
          schema:
            $ref:  "#/definitions/ErrorModel"

  /stats/?categoryId=:
    get:
      tags:
        - visitor
      parameters:
        - in: query
          name: categoryId
          required: True
          type: integer
          description: The Id of a category
      responses:
        "200":
          description: Success - Send the stats of a specific category
          schema:
            $ref: "#/definitions/CategoryStat"
        "400":
          description: Error - That category does not exist
          schema:
            $ref: "#/definitions/ErrorModel"
      operationId: statsCat
      description: Send the stats of a specific category

  /stats/?difficulty=:
    get:
      tags:
        - visitor
      parameters:
        - in: query 
          name: difficulty
          required: True
          type: integer
          maximum: 3
          minimum: 1
          description: The difficulty
      responses:
        "200":
          description: Success - Send the stats of a specific difficulty
          schema:
            $ref: "#/definitions/DifficultyStat"
        "400":
          description: Error - That difficulty does not exist
          schema:
            $ref: "#/definitions/ErrorModel"
      operationId: statsDiff
      description: Send the stats of a specific difficulty
  
  /question/{categoryId}/random:
    get:
      tags:
        - users
      parameters:
        - in: path
          name: categoryId
          required: True
          type: integer
          description: The Id of a category
      responses:
        '200':
          description: Success - Send a random question of a specific category
          schema:
            $ref: "#/definitions/Question"
      operationId: randomQuestion
      description: Returns a random question

  /question/{categoryId}/all:
    get:
      tags:
        - users
      parameters:
        - in: path
          name: categoryId
          required: True
          type: integer
          description: The Id of a category
      responses:
        '200':
          description: Success - Send all questions of a specific category
          schema:
            type: array
            items: 
              $ref: "#/definitions/Question"
      operationId: allQuestion
      description: Returns all question of a category
          
  /question/{categoryId}/{difficultyId}/random:
    get:
      tags:
        - users
      description: Return a random question with the selected difficulty and category.
      responses:
        "200":
          description: Success
  
  /question/{categoryId}/{difficultyId}/all:
    get:
      tags:
        - users
      description: Return all question with the selected difficulty and category.
      responses:
        "200":
          description: Success
  
  /response/{questionId}:
    get:
      tags:
        - users
      description:
        Returns the response of a specified question
      responses:
        "200":
          description: Success

  /anecdote/{questionId}:
    get:
      tags: 
        - users
      description: Return an anecdote with additional information to the question asked
      responses:
        "200":
          description: Success

  /question/{categoryId}/{questionId}?diff=:
    get:
      parameters:
        - in: query
          name: diff
          type: integer
          description: Specify the difficulty of the question.
        - in: path
          name: categoryId
          type: integer
          description: todo
          required: True
        - in: path
          name: questionId
          type: integer
          description: todo
          required: True
        
      tags:
        - users
      responses:
        "200":
          description: Success
      description: find question of a specific categorie by Id 

  /quizz/random:
    get:
      tags:
        - users
      responses:
        "200":
          description: Success - Send a random quizz
          schema:
            $ref: "#/definitions/Quizz"
        "400":
          description: Error - No quizz found
          schema: 
            $ref: "#/definitions/ErrorModel"
      operationId: randomQuizz
      description: Send a random quizz

  /quizz/all:
    get:
      parameters:
        - in: path
          name: categoryId
          required: True
          type: integer
          description: The Id of a category
      tags:
        - users
      responses:
        "200":
          description: Success - Send all quizz of a specific category
          schema:
            type: array
            items: 
              $ref: "#/definitions/Quizz"
        "400":
          description: Error - That category does not exist
          schema: 
            $ref: "#/definitions/ErrorModel"
      operationId: allQuizz
      description: Send all quizz

  /quizz/{categoryId}/random:
    get:
      parameters:
        - in: path
          name: categoryId
          required: True
          type: integer
          description: The Id of a category
      tags:
        - users
      responses:
        "200":
          description: Success - Send a quizz of a specific category
          schema:
            $ref: "#/definitions/Quizz"
        "400":
          description: Error - That category does not exist
          schema: 
            $ref: "#/definitions/ErrorModel"
      operationId: randomQuizzCat
      description: Send a random quizz of a specific category

  /quizz/{categoryId}/all:
    get:
      parameters:
        - in: path
          name: categoryId
          required: True
          type: integer
          description: The Id of a category
      tags:
        - users
      responses:
        "200":
          description: Success - Send all quizz of a specific category
          schema:
            type: array
            items: 
              $ref: "#/definitions/Quizz"
        "400":
          description: Error - That category does not exist
          schema: 
            $ref: "#/definitions/ErrorModel"
      operationId: allQuizzCat
      description: Send all quizz of a specific category

  /quizz/random?diff=:
    get:
      tags:
        - users
      parameters:
        - in: query
          name: diff
          type: integer
          maximum: 3
          minimum: 1
          description: The difficulty of the quizz
      responses:
        "200":
          description: Success - Send a random quizz of a specific difficulty
          schema:
            $ref:  "#/definitions/Quizz"
        "400":
          description: Error - Bad difficulty argument
          schema:
            $ref: "#/definitions/ErrorModel"
      operationId: randomQuizzDiff
      description: Send a random quizz of a specific difficulty

  /quizz/all?diff=:
    get:
      tags:
        - users
      parameters:
        - in: query
          name: diff
          type: integer
          maximum: 3
          minimum: 1
          description: The difficulty of the quizz
      responses:
        "200":
          description: Success - Send all quizz of a specific difficulty
          schema:
            type: array
            items: 
              $ref:  "#/definitions/Quizz"
        "400":
          description: Error - Bad difficulty argument
          schema:
            $ref: "#/definitions/ErrorModel"
      operationId: allQuizzDiff
      description: Send all quizz of a specific difficulty

  /quizz/{categoryId}/random?diff=:
    get:
      tags:
        - users
      parameters:
        - in: query
          name: diff
          type: integer
          maximum: 3
          minimum: 1
          description: The difficulty of the quizz
        - in: path
          name: categoryId
          required: True
          type: integer
          description: The Id of a category
      responses:
        "200":
          description: Success - Send a random quizz of a specific category and difficulty
          schema:
            $ref:  "#/definitions/Quizz"
        "400":
          description: Error - Bad difficulty argument
          schema:
            $ref: "#/definitions/ErrorModel"
      operationId: randomQuizzCatDiff
      description: Send a random quizz of a specific difficulty

  /quizz/{categoryId}/all?diff=:
    get:
      tags:
        - users
      parameters:
        - in: query
          name: diff
          type: integer
          maximum: 3
          minimum: 1
          description: The difficulty of the quizz
        - in: path
          name: categoryId
          required: True
          type: integer
          description: The Id of a category
      responses:
        "200":
          description: Success - Send all quizz of a specific category and ifficulty
          schema:
            type: array
            items: 
              $ref:  "#/definitions/Quizz"
        "400":
          description: Error - Bad difficulty argument
          schema:
            $ref: "#/definitions/ErrorModel"
      operationId: allQuizzCatDiff
      description: Send all quizz of a specific difficulty
        
  /notifications:
    get:
      tags:
        - users
      
      parameters:
        - in: body
          name: userId
          required: true
          schema:
            type: string
            example: d290f1ee-6c54-4b01-90e6-d701748f0480        
      responses:
        "200":
          description: Success - Send a list of notifications
          schema:
            type: array
            items: 
              $ref:  "#/definitions/Notification"
        "400":
          description: Error - This User doesn't exists
          schema:
            $ref:  "#/definitions/ErrorModel"
               
            
  /defy/{userId}/{questionId}:
    post:
      tags:
        - users
      description: Send a defy request to a user.
      parameters:
        - in: body
          name: userId
          required: true
          schema: 
            type: string
            example: d290f1ee-6c54-4b01-90e6-d701748f0480 
        - in: body
          name : questionId
          schema:
            type: string
            example: musique
      responses:
        "200":
          description: Success - Sent a defy request.
          schema:
            type: string
            example: defy request sent
        "400":
          description: Error - User or category not found.
          schema:
            $ref : "#/definitions/ErrorModel"
definitions:
  Category:
    type: object
    required:
      - id
      - name
      - timePlayed
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: Animaux
      timePlayed:
        type: integer
        example: 1000
  
  ErrorModel:
    type: object
    required:
    - message
    - code
    properties:
      message:
        type: string
      code:
        type: integer
        minimum: 100
        maximum: 600
        example: 400

  User:
    type: object
    required:
      - id
      - pseudo
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0480
      pseudo:
        type: string
        example: Yondamdam

  Question:
    type: object
    required:
      - id
      - difficulty
      - question
      - possibilities
    properties:
      id:
        type:  integer
        example: 10
      difficulty:
        type: integer
        maximum: 3
        minimum: 1
        example: 1
      question:
        type: string
        example: "Is this a question ?"
      possibilities:
        type: array
        items: 
          type: string
        example: ["Yes", "No"]

  Answer:
    type: object
    required:
      - questionId
      - answer
    properties:
      questionID:
        type: integer
        example: 10
      answer:
        type: string
        example: "Yes"

  Quizz:
    type: object
    required:
      - id
      - difficulty
      - questions
    properties:
      id:
        type: integer
        example: 10
      difficulty:
        type: integer
        maximum: 3
        minimum: 1
        example: 1
      questions: 
        type: array
        items:
          $ref: "#/definitions/Question"

  QuestionStat:
    type: object
    required:
      - questionID
      - nbGoodAnswers
      - nbBadAnswers
      - totalAnswers
    properties:
      questionID:
        type: integer
        example: 10
      nbGoodAnswers:
        type: number
        example: 56
      nbBadAnswers:
        type: number
        example: 40
      totalAnswers:
        type: number
        example: 96
  
  QuizzStat:
    type: object
    required:
      - quizzID
      - nbGoodAnswers
      - nbBadAnswers
      - totalAnswers
    properties:
      questionID:
        type: integer
        example: 10
      nbGoodAnswers:
        type: number
        example: 56
      nbBadAnswers:
        type: number
        example: 40
      totalAnswers:
        type: number
        example: 96
  
  DifficultyStat:
    type: object
    required:
      - difficultyID
      - nbGoodAnswers
      - nbBadAnswers
      - totalAnswers
    properties:
      questionID:
        type: integer
        example: 10
      nbGoodAnswers:
        type: number
        example: 56
      nbBadAnswers:
        type: number
        example: 40
      totalAnswers:
        type: number
        example: 96
  

  gameRequest:
    type: object
    required:
      - id
      - userId
      - quizz
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0480
      userId:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0480
      quizz:
        $ref:  "#/definitions/Quizz"

        
  Notification:
    type: object
    required:
      - friendRequests
      - gameRequests
    properties:
      friendRequests:
        type: array
        items: 
          $ref:  "#/definitions/User"
      gameRequests:
        type: array
        items:
          $ref:  "#/definitions/gameRequest"
            
          
    

